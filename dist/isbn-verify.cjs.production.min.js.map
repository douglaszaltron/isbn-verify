{"version":3,"file":"isbn-verify.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["interface isOption {\n\tcheck_digit?: boolean; // Verify format including check digit\n}\n\n/**\n * ISBN Verify\n */\nexport default class {\n\t#isbnNoHyphens: string; // ハイフンなしの ISBN\n\t#isbn13 = false; // 現行規格（13桁）の ISBN か\n\t#isbn10 = false; // 旧規格（10桁）の ISBN か\n\n\t/**\n\t * @param {string} isbn - ISBN value to check\n\t * @param {boolean} strict - Strict mode. If `true`, syntax without hyphens is an error. If not specified, it defaults to `false`\n\t */\n\tconstructor(isbn: string, strict = false) {\n\t\tconst isbnNoHyphens = isbn.replace(/-/g, '');\n\t\tthis.#isbnNoHyphens = isbnNoHyphens;\n\n\t\tif (strict) {\n\t\t\tconst length = isbn.length;\n\n\t\t\tif (length === 17 && /^(978|979)-\\d{1,5}-\\d{1,7}-\\d{1,7}-\\d$/.test(isbn)) {\n\t\t\t\tthis.#isbn13 = true;\n\t\t\t} else if (length === 13 && /^\\d{1,5}-\\d{1,7}-\\d{1,7}-[\\dX]$/.test(isbn)) {\n\t\t\t\tthis.#isbn10 = true;\n\t\t\t}\n\t\t} else {\n\t\t\tif (!isbn.includes('--')) {\n\t\t\t\tif (/^(978|979)\\d{10}$/.test(isbnNoHyphens)) {\n\t\t\t\t\tif (/^\\d[\\d-]{11,15}\\d$/.test(isbn)) {\n\t\t\t\t\t\tthis.#isbn13 = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (/^\\d{9}[\\dX]$/.test(isbnNoHyphens)) {\n\t\t\t\t\tif (/^\\d[\\d-]{8,11}[\\dX]$/.test(isbn)) {\n\t\t\t\t\t\tthis.#isbn10 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Alias of `verifyCheckDigit()`\n\t *\n\t * @returns {boolean} `true` if both format and check digit are correct\n\t */\n\tisValid(): boolean {\n\t\treturn this.verifyCheckDigit();\n\t}\n\n\t/**\n\t * Whether it is a 13-digit ISBN\n\t *\n\t * @param {isOption} options - Specifies characteristics about the check item.\n\t *\n\t * @returns {boolean} `true` for current standard (13 digit) ISBN\n\t */\n\tisIsbn13(options?: isOption): boolean {\n\t\tif (options !== undefined && options.check_digit) {\n\t\t\treturn this.#isbn13 && this.verifyCheckDigit();\n\t\t}\n\n\t\treturn this.#isbn13;\n\t}\n\n\t/**\n\t * Whether it is a 10-digit ISBN\n\t *\n\t * @param {isOption} options - Specifies characteristics about the check item.\n\t *\n\t * @returns {boolean} `true` for old standard (10 digit) ISBN\n\t */\n\tisIsbn10(options?: isOption): boolean {\n\t\tif (options !== undefined && options.check_digit) {\n\t\t\treturn this.#isbn10 && this.verifyCheckDigit();\n\t\t}\n\n\t\treturn this.#isbn10;\n\t}\n\n\t/**\n\t * Verify format (do not verify check digit)\n\t *\n\t * @returns {boolean} `true` if the format is correct\n\t */\n\tverifyFormat(): boolean {\n\t\treturn this.#isbn13 || this.#isbn10;\n\t}\n\n\t/**\n\t * Verify format including check digit (not necessarily applicable publication)\n\t *\n\t * @returns {boolean} `true` if both format and check digit are correct\n\t */\n\tverifyCheckDigit(): boolean {\n\t\tif (this.#isbn13) {\n\t\t\tconst isbnNoHyphens = this.#isbnNoHyphens;\n\t\t\treturn isbnNoHyphens.substring(12) === this._getCheckDigit13(isbnNoHyphens);\n\t\t} else if (this.#isbn10) {\n\t\t\tconst isbnNoHyphens = this.#isbnNoHyphens;\n\t\t\treturn isbnNoHyphens.substring(9) === this._getCheckDigit10(isbnNoHyphens);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * ISBN-13 のチェックデジットを取得する\n\t *\n\t * @param {string} isbnNoHyphens - ハイフンなしの ISBN\n\t *\n\t * @returns {string} チェックデジット\n\t */\n\tprivate _getCheckDigit13(isbnNoHyphens: string): string {\n\t\tconst checkDigit = String(\n\t\t\t10 -\n\t\t\t\t((Number(isbnNoHyphens.substring(0, 1)) +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(1, 2)) * 3 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(2, 3)) +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(3, 4)) * 3 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(4, 5)) +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(5, 6)) * 3 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(6, 7)) +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(7, 8)) * 3 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(8, 9)) +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(9, 10)) * 3 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(10, 11)) +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(11, 12)) * 3) %\n\t\t\t\t\t10)\n\t\t);\n\n\t\tswitch (checkDigit) {\n\t\t\tcase '10':\n\t\t\t\treturn '0';\n\t\t}\n\n\t\treturn checkDigit;\n\t}\n\n\t/**\n\t * ISBN-10 のチェックデジットを取得する\n\t *\n\t * @param {string} isbnNoHyphens - ハイフンなしの ISBN\n\t *\n\t * @returns {string} チェックデジット\n\t */\n\tprivate _getCheckDigit10(isbnNoHyphens: string): string {\n\t\tconst checkDigit = String(\n\t\t\t11 -\n\t\t\t\t((Number(isbnNoHyphens.substring(0, 1)) * 10 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(1, 2)) * 9 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(2, 3)) * 8 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(3, 4)) * 7 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(4, 5)) * 6 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(5, 6)) * 5 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(6, 7)) * 4 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(7, 8)) * 3 +\n\t\t\t\t\tNumber(isbnNoHyphens.substring(8, 9)) * 2) %\n\t\t\t\t\t11)\n\t\t);\n\n\t\tswitch (checkDigit) {\n\t\t\tcase '10':\n\t\t\t\treturn 'X';\n\t\t\tcase '11':\n\t\t\t\treturn '0';\n\t\t}\n\n\t\treturn checkDigit;\n\t}\n}\n"],"names":["isbn","strict","isbnNoHyphens","replace","length","test","includes","isValid","this","verifyCheckDigit","isIsbn13","options","undefined","check_digit","_classPrivateFieldLooseBase","isIsbn10","verifyFormat","substring","_getCheckDigit13","_getCheckDigit10","checkDigit","String","Number"],"mappings":"+VAgBaA,EAAcC,YAAAA,IAAAA,GAAS,4LAPzB,gBACA,MAOHC,EAAgBF,EAAKG,QAAQ,KAAM,oBACnBD,EAElBD,EAAQ,KACLG,EAASJ,EAAKI,OAEL,KAAXA,GAAiB,yCAAyCC,KAAKL,iBACnD,EACM,KAAXI,GAAiB,kCAAkCC,KAAKL,mBACnD,QAGXA,EAAKM,SAAS,QACd,oBAAoBD,KAAKH,GACxB,qBAAqBG,KAAKL,mBACd,GAEN,eAAeK,KAAKH,IAC1B,uBAAuBG,KAAKL,mBAChB,+BAYpBO,QAAA,kBACQC,KAAKC,sBAUbC,SAAA,SAASC,eACQC,IAAZD,GAAyBA,EAAQE,YAC7BC,cAAgBN,KAAKC,qBAGtBD,cAURO,SAAA,SAASJ,eACQC,IAAZD,GAAyBA,EAAQE,YAC7BC,cAAgBN,KAAKC,qBAGtBD,cAQRQ,aAAA,kBACQF,gBAAgBN,cAQxBC,iBAAA,gBACKD,WAAc,KACXN,IAAgBM,kBACfN,EAAce,UAAU,MAAQT,KAAKU,iBAAiBhB,GACvD,KAAIM,WAAc,KAClBN,IAAgBM,kBACfN,EAAce,UAAU,KAAOT,KAAKW,iBAAiBjB,UAGtD,KAUAgB,iBAAA,SAAiBhB,OAClBkB,EAAaC,OAClB,IACGC,OAAOpB,EAAce,UAAU,EAAG,IACK,EAAxCK,OAAOpB,EAAce,UAAU,EAAG,IAClCK,OAAOpB,EAAce,UAAU,EAAG,IACM,EAAxCK,OAAOpB,EAAce,UAAU,EAAG,IAClCK,OAAOpB,EAAce,UAAU,EAAG,IACM,EAAxCK,OAAOpB,EAAce,UAAU,EAAG,IAClCK,OAAOpB,EAAce,UAAU,EAAG,IACM,EAAxCK,OAAOpB,EAAce,UAAU,EAAG,IAClCK,OAAOpB,EAAce,UAAU,EAAG,IACO,EAAzCK,OAAOpB,EAAce,UAAU,EAAG,KAClCK,OAAOpB,EAAce,UAAU,GAAI,KACO,EAA1CK,OAAOpB,EAAce,UAAU,GAAI,MACnC,WAGKG,OACF,WACG,WAGFA,KAUAD,iBAAA,SAAiBjB,OAClBkB,EAAaC,OAClB,IAC2C,GAAxCC,OAAOpB,EAAce,UAAU,EAAG,IACK,EAAxCK,OAAOpB,EAAce,UAAU,EAAG,IACM,EAAxCK,OAAOpB,EAAce,UAAU,EAAG,IACM,EAAxCK,OAAOpB,EAAce,UAAU,EAAG,IACM,EAAxCK,OAAOpB,EAAce,UAAU,EAAG,IACM,EAAxCK,OAAOpB,EAAce,UAAU,EAAG,IACM,EAAxCK,OAAOpB,EAAce,UAAU,EAAG,IACM,EAAxCK,OAAOpB,EAAce,UAAU,EAAG,IACM,EAAxCK,OAAOpB,EAAce,UAAU,EAAG,KAClC,WAGKG,OACF,WACG,QACH,WACG,WAGFA"}